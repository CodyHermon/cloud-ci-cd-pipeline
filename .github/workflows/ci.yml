name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  frontend-build:
    name: Frontend Build & Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm install

      - name: Build frontend
        working-directory: frontend
        run: npm run build

  backend-test:
    name: Backend Test & Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install backend dependencies
        working-directory: backend/api
        run: npm install

      - name: Check backend health
        working-directory: backend/api
        run: |
          echo "Backend package.json contents:"
          cat package.json
          echo "Available npm scripts:"
          npm run

  health-check:
    name: Basic Health Check
    runs-on: ubuntu-latest
    needs: [frontend-build, backend-test]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install backend dependencies
        working-directory: backend/api
        run: npm install

      - name: Start API server in background
        working-directory: backend/api
        run: |
          npm run dev &
          API_PID=$!
          echo $API_PID > api.pid
          echo "Started API with PID: $API_PID"

      - name: Wait for API to start
        run: |
          echo "Waiting for API to start..."
          for i in {1..30}; do
            if curl -f http://localhost:3001/api/health 2>/dev/null; then
              echo "✅ API is responding!"
              break
            fi
            echo "Attempt $i/30 - waiting..."
            sleep 2
          done

      - name: Run API health check
        run: |
          response=$(curl -s http://localhost:3001/api/health)
          echo "Health check response: $response"
          if echo "$response" | grep -q "healthy"; then
            echo "✅ API health check passed!"
          else
            echo "❌ API health check failed!"
            exit 1
          fi

      - name: Stop API server
        if: always()
        run: |
          if [ -f backend/api/api.pid ]; then
            API_PID=$(cat backend/api/api.pid)
            echo "Stopping API with PID: $API_PID"
            kill $API_PID || true
            rm backend/api/api.pid
          fi
          # Also kill any remaining node processes
          pkill -f "npm run dev" || true
          pkill -f "tsx" || true
